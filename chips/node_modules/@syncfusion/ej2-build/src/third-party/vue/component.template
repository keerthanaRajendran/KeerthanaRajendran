import Vue from 'vue';{{modelImport}}
import { ComponentBase, EJComponentDecorator } from '@syncfusion/ej2-vue-base';
import { {{ComponentClass}} } from '{{packagepath}}';
{{childDirectiveImport}}

export const properties: string[] = [{{properties}}];
export const modelProps: string[] = [{{models}}];

{{componentComments}}
@EJComponentDecorator({
    props: properties{{modelEvent}}
})
export class {{ComponentClass}}Component extends ComponentBase {
    
    public ej2Instances: any;
    public propKeys: string[] = properties;
    public models: string[] = modelProps;
    public hasChildDirective: boolean = {{hasChildDirective}};
    protected hasInjectedModules: boolean = {{dynamicModules}};
    public tagMapper: { [key: string]: Object } = {{tagMapper}};
    public tagNameMapper: Object = {{tagNameMapper}};
    
    constructor() {
        super();
        this.ej2Instances = new {{ComponentClass}}({});{{triggerChange}}
        this.bindProperties();
        this.ej2Instances._setProperties = this.ej2Instances.setProperties;
        this.ej2Instances.setProperties = this.setProperties;
    }
    public setProperties(prop: any, muteOnChange: boolean): void {
        if (this.ej2Instances && this.ej2Instances._setProperties) {
            this.ej2Instances._setProperties(prop, muteOnChange);
        }
        if (prop && this.models && this.models.length) {
            Object.keys(prop).map((key: string): void => {
                this.models.map((model: string): void => {
                    if ((key === model) && !(/datasource/i.test(key))) {
                        this.$emit('update:' + key, prop[key]);
                    }
                });
            });
        }
    }
{{modelTrigger}}
    public render(createElement: any) {
        return createElement('{{tagName}}', (this as any).$slots.default);
    }
    {{method}}
}

export const {{ComponentClass}}Plugin = {
    name: 'ejs-{{Component}}',
    install(Vue: any) {
        Vue.component({{ComponentClass}}Plugin.name, {{ComponentClass}}Component);
{{childDirectivePlugin}}
    }
}
